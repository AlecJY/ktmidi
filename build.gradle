import org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTargetWithTests

plugins {
    id 'com.android.library' version '4.1.3'
    id 'org.jetbrains.kotlin.multiplatform' version '1.5.10'
    id 'org.jetbrains.dokka' version '1.5.0'
    id 'maven-publish'
    id 'signing'
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
}

group = 'dev.atsushieno'
version = '0.3.4'

repositories {
    google()
    mavenCentral()
}

kotlin {
    jvm {
        compilations.all {
            kotlinOptions.jvmTarget = '1.8'
        }
        testRuns["test"].executionTask.configure {
            useJUnit()
        }
    }
    android {
        publishLibraryVariantsGroupedByFlavor = true
        publishLibraryVariants("debug", "release")
    }
    js(BOTH) {
        browser {
            testTask {
                useKarma {
                    useChromeHeadless()
                    webpackConfig.cssSupport.enabled = true
                }
            }
        }
        nodejs {
        }
    }
    /*
    iosX64('ios') {
        binaries {
            framework {
                baseName = 'library'
            }
        }
    }
    */
    linuxX64('native') { // Use your target instead.
        binaries {
            staticLib {
            }
            sharedLib {
            }
        }
    }
    def hostOs = System.getProperty("os.name")
    def isMingwX64 = hostOs.startsWith("Windows")
    KotlinNativeTargetWithTests nativeTarget
    if (hostOs == "Mac OS X") nativeTarget = macosX64('native')
    else if (hostOs == "Linux") nativeTarget = linuxX64("native")
    else if (isMingwX64) nativeTarget = mingwX64("native")
    else throw new GradleException("Host OS is not supported in Kotlin/Native.")

    
    sourceSets {
        commonMain {
            dependencies {
                implementation('org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.3')
                implementation('org.jetbrains.kotlinx:kotlinx-datetime:0.2.0')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {

        }
        androidMain {
            dependencies {
                implementation 'androidx.core:core-ktx:1.5.0'
            }
        }
        androidTest {
            dependencies {
                implementation kotlin('test-junit')
                implementation 'junit:junit:4.13.2'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test-junit')
            }
        }
        jsMain {

        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        nativeMain {

        }
        nativeTest {

        }
        /*
        iosMain {
        }
        iosTest {
        }
        */
    }
}

android {
    compileSdkVersion 30
    sourceSets.main.manifest.srcFile('src/androidMain/AndroidManifest.xml')
    sourceSets.test.assets.srcDir("src/commonTest/resources") // kind of hack...
    defaultConfig {
        minSdkVersion 24
        targetSdkVersion 30
    }
    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled false
        }
    }
}

afterEvaluate {

    tasks.register('javadocJar', Jar) {
        archiveClassifier.set('javadoc')
    }

    publishing {
        publications.all {
            artifact(javadocJar)
            pom {
                name.set('ktmidi')
                description.set('Kotlin Multiplatform library for MIDI 1.0 and MIDI 2.0')
                url.set('https://github.com/atsushieno/ktmidi')
                scm {
                    url.set('https://github.com/atsushieno/ktmidi')
                }
                licenses {
                    license {
                        name.set('the MIT License')
                        url.set('https://github.com/atsushieno/ktmidi/blob/main/LICENSE')
                    }
                }
                developers {
                    developer {
                        id.set('atsushieno')
                        name.set('Atsushi Eno')
                        email.set('atsushieno@gmail.com')
                    }
                }
            }
        }

        repositories {
            /*
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/atsushieno/ktmidi")
                credentials {
                    username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                    password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
                }
            }
            */
            maven {
                name = "OSSRH"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    username = System.getenv("OSSRH_USERNAME")
                    password = System.getenv("OSSRH_PASSWORD")
                }
            }
        }
    }

    apply from: "${rootDir}/publish-root.gradle"

    // keep it as is. It is replaced by CI release builds
    signing {}
}
